<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>資訊架構備忘表 – 設計模式</title>
    <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/sortware-architecture/design-pattern/</link>
    <description>Recent content in 設計模式 on 資訊架構備忘表</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    
	  <atom:link href="https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/sortware-architecture/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Cheat Sheet: 微服務</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/sortware-architecture/design-pattern/microservices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/sortware-architecture/design-pattern/microservices/</guid>
      <description>
        
        
        &lt;h3 id=&#34;描述&#34;&gt;描述&lt;/h3&gt;
&lt;p&gt;微服務是一種軟體架構模式，藉由將大的系統拆成多個小的模組，以實現鬆耦合的系統架構。各微服務有獨立的業務邏輯，並連接到自有的資料庫。微服務之間通過HTTP等輕量化通信協定進行溝通。&lt;/p&gt;
&lt;h3 id=&#34;使用情境&#34;&gt;使用情境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;複雜的大型系統，希望減少耦合度&lt;/li&gt;
&lt;li&gt;希望彈性的水平部屬系統&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;優點&#34;&gt;優點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;減少耦合度 : 藉由拆分不同的系統，避免內部直接呼叫，以減少耦合度&lt;/li&gt;
&lt;li&gt;易於水平擴展 : 猶豫不同的系統可以有獨立的容器，針對高流量需求的系統，可以動態部屬更多容器&lt;/li&gt;
&lt;li&gt;技術獨立 : 不同的系統可以依照其特性使用不同的軟體架構與技術選型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺點&#34;&gt;缺點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;無法直接跨系統呼叫 : 由於已經拆分為不同的系統，因此無法直接直接呼叫其商業邏輯&lt;/li&gt;
&lt;li&gt;需要較多的網路流量 : 各微服務之間以網路進行通信，可能會增加網路流量需求&lt;/li&gt;
&lt;li&gt;部屬與維運較複雜: 因為拆分為多個子服務，各自需要獨立部屬。而且需要偵測各自流量需求，動態水平伸縮，因此管理上較為複雜。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Cheat Sheet: 事件驅動</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/sortware-architecture/design-pattern/event-driven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/sortware-architecture/design-pattern/event-driven/</guid>
      <description>
        
        
        &lt;h3 id=&#34;描述&#34;&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;事件驅動模式是一種以註冊事件並指定事件發生時預期執行的邏輯的程式設計模式。該模式中，事件處理邏輯與事件觸發點解耦合，不需要在程式碼中直接指定事件觸發的位置，而是通過事件註冊和觸發系統來動態連接事件觸發點和處理邏輯。&lt;/p&gt;
&lt;h3 id=&#34;優點&#34;&gt;&lt;strong&gt;優點&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解耦合：事件處理邏輯與事件觸發點解耦合，使得程式結構更靈活且易於維護。&lt;/li&gt;
&lt;li&gt;非同步：事件觸發程式不需要等待事件處理邏輯完成，可以快速回應使用者，提高系統的反應速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺點&#34;&gt;&lt;strong&gt;缺點&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;處理流程不明確：由於事件註冊和觸發系統動態呼叫事件處理邏輯，因此後續的事件流程可能不容易理解和追蹤。&lt;/li&gt;
&lt;li&gt;交易控制困難：因為各個事件處理邏輯相互獨立，無法在某個事件處理邏輯中追蹤和控制之前事件處理階段的結果。&lt;/li&gt;
&lt;li&gt;效能影響：由於需要動態觸發事件並處理大量的事件，系統的效能可能受到影響。需要適當地設計和管理事件註冊，以避免性能問題。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
