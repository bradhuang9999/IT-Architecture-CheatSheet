<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>資訊架構備忘表 – 應用程式介面</title>
    <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/</link>
    <description>Recent content in 應用程式介面 on 資訊架構備忘表</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    
	  <atom:link href="https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Cheat Sheet: 網路應用程式</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/web-application/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/web-application/</guid>
      <description>
        
        
        &lt;h3 id=&#34;概述&#34;&gt;概述:&lt;/h3&gt;
&lt;p&gt;網路應用程式是通過瀏覽器連接網站，直接使用應用程式。&lt;/p&gt;
&lt;h3 id=&#34;優點&#34;&gt;優點:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不須安裝: 不同於傳統單機應用程式需要進行安裝，只要通過瀏覽器連接網站就可以取得應用程式。&lt;/li&gt;
&lt;li&gt;版本同步: 連線到網路應用程式時隨時都是使用最新版的應用程式，避免版本不一致所造成的使用問題。&lt;/li&gt;
&lt;li&gt;跨平台使用: 只要使用標準瀏覽器，就可以使用應用程式。免於不同種類、版本電腦的差異問題。&lt;/li&gt;
&lt;li&gt;客戶端負載低: 大部分的計算可於伺服器端進行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺點&#34;&gt;缺點:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安全性: 通過公共網路連接應用程式，有更多的資安風險。例如XSS, SQL Injection, CSRF等攻擊。&lt;/li&gt;
&lt;li&gt;複雜性: 程式分割為處理顯示的瀏覽器前端與處理商業邏輯的伺服器後端，流程較為抽象與複雜。&lt;/li&gt;
&lt;li&gt;瀏覽器版本問題: 不同用戶端安裝的瀏覽器版本不一，需要考慮瀏覽器的相容性議題。
無法離線使用: 當沒有網路時，就無法使用網路應用程式。現代的PWA應用程式將資料進行緩存以緩解此問題。&lt;/li&gt;
&lt;li&gt;網路速度問題: 某些客戶的網路速度較不穩定，可能會影響使用效能，需要考慮快取或縮減、延遲網路請求等技術。&lt;/li&gt;
&lt;li&gt;軟硬體訪問限制: 由於瀏覽器的支援性及安全性議題，沒有辦法如同原生應用程式一般，可以讀取全部硬體資訊及全部的使用者資訊與檔案&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Cheat Sheet: PWA</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/progressive-web-apps/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/progressive-web-apps/</guid>
      <description>
        
        
        &lt;h3 id=&#34;概述&#34;&gt;概述:&lt;/h3&gt;
&lt;p&gt;PWA (Progressive web application) 是一種特殊形式的網路應用程式。藉由定義icon、主題顏色等類似傳統應用程式所需的資訊，以及service worker的機制以在網路中斷時提供部分功能及訊息推送機制。以讓PWA可以在跨平台的裝置上提供模擬原生應用程式的功能。&lt;/p&gt;
&lt;h2 id=&#34;使用情境&#34;&gt;使用情境:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以模擬原生應用程式的形式，提供跨平台的應用程式。&lt;/li&gt;
&lt;li&gt;不一定隨時都需要連接到網路的網路應用程式&lt;/li&gt;
&lt;li&gt;提供更好的服務給網路環境受限的用戶&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;優點&#34;&gt;優點:&lt;/h2&gt;
&lt;p&gt;除了如同網頁應用程式的優點，例如：跨平台、免安裝、免更新等優點之外。PWA又多了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;類應用程式: 可產生桌面捷徑與icon等類似傳統應用程式的功能&lt;/li&gt;
&lt;li&gt;離線使用: 在網路中斷時，仍可提供部分核心功能。&lt;/li&gt;
&lt;li&gt;載入速度快: 由於已經將程式資料快取於瀏覽器，因此啟動速度較快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缺點&#34;&gt;缺點:&lt;/h2&gt;
&lt;p&gt;除了一般網路應用程式的缺點外，又多了以下缺點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快取控制機制複雜: 由於需要快取離線資訊，聯網時又需要更新資料。不同的資料其更新策略又不一致，因此快取控制的機制較為複雜。&lt;/li&gt;
&lt;li&gt;不同瀏覽器的支援程度不一致，有些設備的瀏覽器對PWA的支援度並不完整。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Cheat Sheet: 手機應用程式</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/mobile-app/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/mobile-app/</guid>
      <description>
        
        
        &lt;h3 id=&#34;概述&#34;&gt;概述:&lt;/h3&gt;
&lt;p&gt;手機應用程式是一種專門安裝在手機上的應用程式，通常通過手機上的應用程式商店進行安裝。不同作業系統的預設開發框架不同，須分別開發。或使用跨平台開發框架，例如React Native或Flutter進行開發。&lt;/p&gt;
&lt;h2 id=&#34;優點&#34;&gt;優點:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方便與易用: 可直接通過應用程式商店安裝，無須額外下載或輸入網址。且介面通常經過優化，適合在手機上使用。&lt;/li&gt;
&lt;li&gt;支援性高: 通過使用者授權後，可完整支援手機的各種硬體功能與讀取各種系統資訊。&lt;/li&gt;
&lt;li&gt;離線使用: 除非需網路功能，不然大部分手機應用程式可以離線運行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缺點&#34;&gt;缺點:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;開發成本高: 須分別替iOS或Android進行開發，且需要測試多版本的手機廠牌&lt;/li&gt;
&lt;li&gt;舊版本手機支援問題: 需考慮許多使用者仍然使用舊型號的手機，其軟硬體支援度較差。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Cheat Sheet: 無程式碼 App</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/no-code-app/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/application-view/no-code-app/</guid>
      <description>
        
        
        &lt;h3 id=&#34;概述&#34;&gt;概述:&lt;/h3&gt;
&lt;p&gt;無程式碼 App是一種SaaS服務，藉由UI介面設計工具，不需要寫程式，直接拖曳相關介面並選擇按鈕按下後的處理動作，簡單的完成客製化程式的開發。其做法為通過抽象化邏輯設計流程，使用可視化工具設計使用者介面與動作邏輯，後續平台按照選定的規則執行程式邏輯。&lt;/p&gt;
&lt;h2 id=&#34;使用情境&#34;&gt;使用情境:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果只需要開發簡單的程式功能，例如表單填寫、資料呈現或單純的互動功能，不適合需要複雜的UI介面與流程的程式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;優點&#34;&gt;優點:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;無須撰寫程式即可設計使用應用程式，讓非程式開發人員也可以簡單的設計自己想要的軟體介面與功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缺點&#34;&gt;缺點:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;能使用的功能受限於此Codeless App平台所設計的框架，無法設計較複雜的應用程式與流程。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
