<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>資訊架構備忘表 – 執行環境</title>
    <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/execute-env/</link>
    <description>Recent content in 執行環境 on 資訊架構備忘表</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    
	  <atom:link href="https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/execute-env/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Cheat Sheet: Docker</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/execute-env/docker/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/execute-env/docker/</guid>
      <description>
        
        
        &lt;h3 id=&#34;概述&#34;&gt;概述:&lt;/h3&gt;
&lt;p&gt;容器化技術的代表性產品，在同一作業系統中分隔獨立的軟體運作環境。&lt;/p&gt;
&lt;h3 id=&#34;情境&#34;&gt;情境:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;開發與測試：在開發與測試階段，使用Docker可以少量系統資源提供與正式環境一致的測試環境。&lt;/li&gt;
&lt;li&gt;直接使用已封裝的應用程式映像檔：Docker生態系統可找到許多可直接使用的各式應用程式映象檔，節省在不同環境建置、設定應用程式的時間。&lt;/li&gt;
&lt;li&gt;隔離多個應用程式環境：在同一伺服器中，分隔多個容器，以避免不同應用程式的版本與設定衝突或是使用時影響其他應用程式&lt;/li&gt;
&lt;li&gt;快速部屬：Docker的輕量化特性，適合快速在多台伺服器部屬應用程式&lt;/li&gt;
&lt;li&gt;微服務架構：Docker本身的隔離特性適合與微服務進行結合，微服務將應用程式拆為多個小程式，搭配使用Docker可快速、有彈性的依使用需求動態調整各微服務的容器數量。&lt;/li&gt;
&lt;li&gt;雲原生程式：由於雲端以系統資源使用量為計價、以及可快速依需求提供多台運算資源。所以Docker的輕量化與快速部屬特性極適合雲端環境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;優點&#34;&gt;優點:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;輕量化：由於容器內不包含作業系統，可以因此快速啟動，並且使用較少系統資源。&lt;/li&gt;
&lt;li&gt;隔離性：各個容器獨立執行，避免應用程式的衝突。並且在任一容器錯誤時，可獨立重啟而不影響其他現有容器。&lt;/li&gt;
&lt;li&gt;安全性：以容器隔離不同的應用程式，可增加安全性。&lt;/li&gt;
&lt;li&gt;還原性：可監控容器的狀態並自動重啟。&lt;/li&gt;
&lt;li&gt;管理機制豐富：內建多種管理容器的機制，例如：資源監控、錯誤偵測、自動重啟等。&lt;/li&gt;
&lt;li&gt;避免作業系統產生的衝突：由於在作業系統上再封裝一個抽象層，因此可解決在傳統不同版本作業系統差異而造成的管理困難。&lt;/li&gt;
&lt;li&gt;隨時啟用：由於具有獨立的運作環境，不受不同作業系統版本的差異影響。可直接載入並啟用開發商或社群所提供的映象檔。&lt;/li&gt;
&lt;li&gt;水平伸縮：易於部屬與擴展，可快速新增或移除容器，以應對流量變化。&lt;/li&gt;
&lt;li&gt;CICD機制：將Dockerfile等建置映像檔所需的資料放入版本庫中之後，可自動產生、驗證、部屬映像檔。&lt;/li&gt;
&lt;li&gt;提供IaC機制：由於Dockerfile中記載完整的容器建置過程，因此具有IaC的相關優點，例如方便追蹤容器建置的細節差異。&lt;/li&gt;
&lt;li&gt;版本控制與快速回滾：可同時有新舊版本的映像檔，方便在錯誤時快速切換版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺點&#34;&gt;缺點:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安全性：預設以Root身分啟動容器，這會造成潛在的風險。可以改成以其他身分啟動容器，但是實作上較複雜。&lt;/li&gt;
&lt;li&gt;學習門檻：Docker的容器化機制有其複雜度，需要較長的學習期間，以理解其資料持久化、網路配置、自動重啟等機制。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Cheat Sheet: VM</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/execute-env/vm/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/execute-env/vm/</guid>
      <description>
        
        
        &lt;h3 id=&#34;概述&#34;&gt;概述:&lt;/h3&gt;
&lt;p&gt;VM (Virtual Machine) 是在一台實體機器中分割多個獨立的虛擬機器，每一個VM可設置可使用的運算資源與記憶體資源量。在每一個VM中，安裝獨立的作業系統與應用程式。這種模式可以提供多個不互相干擾的軟體運作環境，以滿足多個不同的使用需求。&lt;/p&gt;
&lt;h3 id=&#34;使用情境&#34;&gt;使用情境:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;獨立環境：有一台較大的伺服器，且同時有多個希望獨立運作的中小型運算需求。&lt;/li&gt;
&lt;li&gt;移植雲端：預計將地端環境移植到雲端，但是舊有架構尚無法容器化或需安裝其他無法容器化套裝軟體。&lt;/li&gt;
&lt;li&gt;垂直伸縮：希望可以依照使用需求，動態調整作業環境的運算資源量。&lt;/li&gt;
&lt;li&gt;水平伸縮：透過VM的映象檔機制，可以快速部屬到其他機器&lt;/li&gt;
&lt;li&gt;系統還原：透過VM的映象檔機制快速進行系統還原。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺點&#34;&gt;缺點:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;資源使用量大：相較於輕量化的容器管理技術，每一個VM都需要安裝作業系統，因此需要使用較多系統資源&lt;/li&gt;
&lt;li&gt;啟動速度慢：每一個VM都有獨立的作業系統，因此載入速度較慢&lt;/li&gt;
&lt;li&gt;費用高昂：需要採購額外的VM管理系統才能使用完整VM機制，這往往需要高額的授權費用。&lt;/li&gt;
&lt;li&gt;水平擴展不易：VM的擴展相對較困難，特別是在需要大規模部署和管理多個VM的情境下。每一台VM的設定、網路配置等屬性都需要進行調整，這可能需要額外的時間和工作量。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Cheat Sheet: Kubernetes</title>
      <link>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/execute-env/kubernetes/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bradhuang9999.github.io/IT-Architecture-CheatSheet/zh-tw/cheat-sheet/application-architecture/execute-env/kubernetes/</guid>
      <description>
        
        
        &lt;h3 id=&#34;概述&#34;&gt;概述:&lt;/h3&gt;
&lt;p&gt;Kubernetes是一個大規模部屬與容器編排的工具。&lt;/p&gt;
&lt;p&gt;主要功能如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器編排：將功能相關的容器組成pod，pod裡面可以有獨立的子網路等設定&lt;/li&gt;
&lt;li&gt;容器部屬：依照伺服器負載數值或排程，進行自動化容器部屬。當伺服器無法容納更多容器時，將自動啟動更多伺服器。&lt;/li&gt;
&lt;li&gt;高可用性：當容器或伺服器錯誤時，自動替換失敗的容器或伺服器&lt;/li&gt;
&lt;li&gt;網路管理：替各容器分配獨立的IP位置及網路區隔。&lt;/li&gt;
&lt;li&gt;服務發現：由於同一容器分布於多台伺服器中，以負載均衡模式將流量到合適的容器。&lt;/li&gt;
&lt;li&gt;部屬管理：與CICD結合，可用各種方式進行部屬管理與測試，例如：灰度部屬或A/B測試&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用情境&#34;&gt;使用情境:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可在多達上萬台分布式環境中管理容器服務&lt;/li&gt;
&lt;li&gt;多區域與混合雲中管理容器服務&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺點&#34;&gt;缺點:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;設定複雜：由於管理上萬台伺服器的複雜性，其網路與容器相關設定較為複雜&lt;/li&gt;
&lt;li&gt;學習曲線高：由於有許多抽象的概念，例如pod, service, ingress，而且有許多不同的設定會影響容器集群，因此需要較長的時間進行學習。&lt;/li&gt;
&lt;li&gt;資源消耗：由於需要監控、管理容器，因此需要耗費較多系統資源。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
